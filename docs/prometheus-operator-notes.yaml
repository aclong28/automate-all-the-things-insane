# Prometheus Operator Notes

## Steps to monitor third-party application
1. Deploy the application you want to monitor.
2. Deploy an exporter for the application.
3. Create a service monitor for the exporter.

## Concepts

### Exporter
Prometheus works by pulling (scraping) metrics from monitored targets at regular intervals. It looks for these metrics at an HTTP endpoint which by defaut is host-address/metrics. For this to work, the target must expose metrics in /metrics and they also have to be ina a format that Prometheus understands. Some applications/services do both of these thing by default, but others don't.

For those applications/services that don't, we have exporters. An exporter is a software that exposes metrics from third-party systems in a format that Prometheus can scrape. 

Exporters serve as an intermediary between Prometheus and the applications or services that don't natively expose metrics in a format Prometheus understands. They collect metrics from these sources, transform them into the Prometheus data model, and then expose them via an HTTP endpoint at exporter-host-address/metrics.

<!-- POR DEFAULT EL CHER VIENE CON NODE EXPOERTE Q EXPORTA METRICAS DE LOS NODOS DEL CLUSTER
PARA Q EL EXPORTER FUNCIONE NECESITAMOS EL EXPORTER (QUE ES UN POD), UN SERVICE PARA ESTE POD Y UN POD/SERVICEMONITOR PARA Q SEA IDENTIFICADO COMO TARGET
COMO ESTAMOS JUTNANTO METRICS DE ISTIO O DE MY-APP????? -->

### PodMonitor & ServiceMonitor
PodMonitor and ServiceMonitor are both custom resource definitions (CRDs) used in the Prometheus Operator. These CRDs allow you to define how your services should be monitored by Prometheus in a Kubernetes-native way. Despite serving a similar end goal—facilitating the discovery of metrics endpoints for Prometheus to scrape—they target different types of resources within a Kubernetes cluster.

Key Differences:
- Scope of Monitoring: ServiceMonitor is for services, facilitating the discovery of services and the pods behind them, while PodMonitor is for direct pod monitoring, irrespective of services.
- Use Cases: ServiceMonitor is ideal when services are the primary abstraction for your applications, and you're interested in metrics at the service level. PodMonitor is better suited for scenarios where direct pod metrics are necessary, such as monitoring specific sidecar containers or jobs without a service.
- Discovery Mechanism: Both use label selectors, but they target different Kubernetes resources—services for ServiceMonitor and pods for PodMonitor.

<!-- QUE PODMONIROS Y SERVICEMONITORS CREAMOS Y PORQ????
EXPLCIAR RELEASE LABEL Y MOSTRAR UN EJEMPLO -->
